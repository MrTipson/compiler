int read(int fd, char* cbuf, int count);
void printf(char* format, int arg1, int arg2);
void exit(int status);
void* malloc(int size);

void main() {
	int len = readInt();
	int* arr = (int*) malloc(len * sizeof(int));
	int i = 0;
	char c;
	// Init array from stdin
	while(i < len) {
		arr[i++] = readInt();
	}
	// Print unsorted array
	i = 0;
	printf("Before: ", 0, 0);
	while(i < len) {
		printf("%d, ", arr[i++], 0);
	}
	// Call sort
	insertionsort(arr, len);
	// Print sorted array
	i = 0;
	printf("\nAfter: ", 0, 0);
	while(i < len) {
		printf("%d, ", arr[i++], 0);
	}
}

void insertionsort(int* array, int length) {
	int i = 0;
	while(i < length - 1) {
		if(array[i] > array[i + 1]) {
			int x = array[i];
			array[i] = array[i + 1];
			array[i + 1] = x;
			if(i > 0) i = i - 1;
		} else {
			i = i + 1;
		}
	}
}

int readInt() {
	char c;
	int sign = 1;
	int num = 0;
	int nread = read(0, &c, 1);
	// Delimiters that are skipped
	while((c == '\n' || c == ' ' || c == ',') && nread > 0) {
		nread = read(0, &c, 1);
	}
	if(c == '-') {
		sign = -1;
		nread = read(0, &c, 1);
	}
	while(c >= '0' && c <= '9' && nread > 0) {
		num = num * 10 + c - '0';
		nread = read(0, &c, 1);
	}
	return num * sign;
}

int socket(int domain, int type, int protocol);
int bind(int sockfd, sockaddr_in* addr, int addrlen);
int listen(int sockfd, int backlog);
int close(int fd);
int fork();
void exit(int status);
int send(int sockfd, void* buf, int len, int flags);
int recv(int sockfd, void* buf, int len, int flags);
int accept(int sockfd, sockaddr_in* addr, int* addrlen);
int waitid(int idtype, int id, void* infop, int options);
void* malloc(int size);

void printf(char* format, int arg1, int arg2);

struct sockaddr_in {
	char[2]	sin_family;
	char[2] sin_port;
	int[2]	sin_addr;
	char[8]	sin_zero;
};
void setSockAddr(sockaddr_in* addr, int port) {
	addr->sin_family[0] = (char)2; 			addr->sin_family[1] = (char)0; // AF_INET
	addr->sin_port[0] = (char)(port/256); 	addr->sin_port[1] = (char)(port%256); // reverse byte order (htons)
	addr->sin_addr[0] = 0; 					addr->sin_addr[1] = 0; // INADDR_ANY
	int i = 0;
	while(i < 8) addr->sin_zero[i++] = (char) 0;
}
void break(){}
int BUFFER_SIZE = 100;
int PORT = 5681;
int main(){
	// Variable for exit statuses
	int iResult;
	// Create a socket that will handle TCP/IP clients
	int listener = socket(2, 1, 0); // AF_INET, SOCK_STREAM
	if (listener < 0) {
		printf("Error creating socket %d\n", listener, 0);
		return 1;
	}
	printf("Socket fd: %d\n", listener, 0);
	sockaddr_in addr;
	setSockAddr(&addr, PORT);
	// Bind the socket to a port
	iResult = 0;
	iResult = bind(listener, &addr, sizeof(sockaddr_in));
	if(iResult < 0) {
		printf("Bind failed %d\n", iResult, 0);
		close(listener);
		return 1;
    }

	// Start listening
	iResult = listen(listener, 5);
	if(iResult < 0) {
		printf("Error listening %d\n", iResult, 0);
		close(listener);
		return 1;
	}
	printf("Listening on port: %d\n", PORT, 0);

	/*
	Accept new connections
	Allow multiple connections using fork (not as efficient as threads)
	*/
	while (true)
	{
		printf("Waiting for a connection.\n", listener, 0);
		// Accept connection and create the client socket
		int clientSock = accept(listener, (sockaddr_in*) null, (int*) null);
		if (clientSock < -1) {
			printf("Error accepting a client %d\n",clientSock,0);
			close(listener);
			return 1;
		}
		printf("Accepted client on socket %d\n", clientSock,0);
		if(fork() == 0){
			if(fork() == 0){
				char* buff = (char*) malloc(BUFFER_SIZE * sizeof(char));
				// Start serving the client
				iResult = recv(clientSock, (void*) buff, BUFFER_SIZE, 0);
				while (iResult > 0) {
					printf("%d bytes received\n", iResult, 0);

					// Just send the data back (demo)
					iResult = send(clientSock, (void*) buff, iResult, 0);
					if (iResult < 0) {
						printf("Send failed! %d\n", iResult, 0);
						close(clientSock);
						exit(1);
					}
					printf("%d bytes sent\n", iResult, 0);
					// Receive data
					iResult = recv(clientSock, (void*) buff, BUFFER_SIZE, 0);
				}
				if (iResult == 0)
					printf("Closing connection...\n", 0, 0);
				else{
					printf("Recv failed! %d\n", iResult, 0);
					close(clientSock);
					exit(1);
				}
				close(clientSock);
			}
			exit(0);
		} else {
			waitid(2,0,null,0);
		}
		
	}
	// Close server socket
	close(listener);
}
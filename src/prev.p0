:fun(main){
	d = 1 # debug
	a = 1000 # stack pointer
	:call(readFile)
	b = m
	:call(tokenize)
	# c = condition, d = debug, so next var is e
	e = m
	:call(syntax)
	:exit(a)
}
#
# Phase 2 - Syntax analisys
#
:fun(syntax){
	:if(d){
		:raw("\nPhase 2 - Syntax analisys\n")
	}
	i = b
	g = e - 4 # dont count safety token
	c = i < g
	:while(c){
		f = 1
		w = i # save old place of token parsing
		o = m # save old memory pointer
		:call(syntax_isDeclaration)
		:if(f){
			# restore if matching changed anything
			i = w
			m = o
			:call(syntax_isFunction)
			:if(f){
				:call(errorUnmatchedToken)
			}
		}
		c = i < g
	}
}
:fun(syntax_isParameter){
	:call(syntax_isType)
	y = f == 0 # match found
	:load(x,i)
	x = x == 2
	y = y & x
	:if(y){
		i = i + 4
		x = 4 # parameter
		:store(x,m)
		x = m - 4 # type was written in last cell
		m = m + 1
		:store(x,m)
		m = m + 1
		:store(i,m) # identifier is current token
		m = m + 2 # skip one
		:if(d){
			:raw("PAR ")
		}
	} else {
		f = 1
	}
}
:fun(syntax_isFunction){
	:call(syntax_isType)
	y = f == 0 # match found
	:load(x,i)
	x = x == 2 # ident
	y = y & x
	:if(y){ # type ident
		x = 3 # function
		:store(x,m)
		x = m - 4 # type was written in last cell
		m = m + 1
		:store(x,m)
		m = m + 1
		:store(i,m) # identifier is current token
		m = m + 1
		x = 0 # start of function block
		:store(x,m)
		m = m + 1
		i = i + 4
		:load(x,i)
		y = x == 14 # (
		:if(y){
			i = i + 4
			:load(x,i)
			y = x =! 15 # )
			:if(y){ # undo first increment of while loop
				i = i - 4
			}
			:while(y){
				i = i + 4
				f = 1
				:call(syntax_isParameter)
				:if(f){
					:call(errorUnmatchedToken)
				}
				:load(x,i)
				y = x == 21 # ,
			}
			y = x =! 15 # )
			:if(y){
				:call(errorExpectedRPARENT)
			}
			i = i + 4
			:load(x,i)
			y = x =! 16 # {
			:if(y){
				:call(errorExpectedLCURLY)
			}
			i = i + 4
			:load(x,i)
			y = x =! 17 # }
			:while(y){
				f = 1
				:call(syntax_isStatement)
				:if(f){
					:call(errorUnmatchedToken)
				}
				:load(x,i)
				y = x =! 17 # }
			}
			i = i + 4
			x = 3 # function
			:store(x,m)
			x = 1 # function end block
			m = m + 3
			:store(x,m)
			m = m + 1
			f = 0 # set match flag
			:if(d){
				:raw("FUN ")
			} 
		} else {
			f = 1
		}
	} else {
		f = 1
	}
}
:fun(syntax_isStatement){
	s = w
	:call(push)
	s = o
	:call(push)
	w = i
	o = m
	:call(syntax_isDeclaration)
	:if(f){
		i = w
		m = o
		:call(syntax_isReturn)
		:if(f){
			i = w
			m = o
			:call(syntax_isAssign)
			:if(f){
				i = w
				m = o
				:call(syntax_isIf)
				:if(f){
					i = w
					m = o
					:call(syntax_isWhile)
					:if(f){
						i = w
						m = o
						:call(syntax_isExprStmt)
						:if(f){
							i = w
							m = o
						}
					}
				}
			}
		}
	}
	:call(pop)
	o = s
	:call(pop)
	w = s
}
:fun(syntax_isReturn){
	:load(x,i)
	y = x == 27 # return
	:if(y){
		i = i + 4
		:load(x,i)
		y = x == 22 # ;
		:if(y){
			x = 5 # return
			:store(x,m)
			x = -1 # expression
			m = m + 1
			:store(x,m)
			m = m + 3 # skip two
			f = 0 # set match flag
			:if(d){
				:raw("RET ")
			}
		} else {
			:call(syntax_isExpression)
			y = f == 0
			:load(x,i)
			x = x == 22 # ;
			y = y & x
			:if(y){
				i = i + 4
				x = 5 # return
				:store(x,m)
				x = m - 4 # expression
				m = m + 1
				:store(x,m)
				m = m + 3 # skip two
				f = 0 # set match flag
				:if(d){
					:raw("RET ")
				}
			} else {
				f = 1
			}
		}
	}
}
:fun(syntax_isAssign){
	:call(syntax_isExpression)
	y = f == 0
	:load(x,i)
	x = x == 1 # any of the assignments
	y = y & x
	f = 1
	:if(y){
		z = i + 1
		:load(s,z)
		:call(push)
		s = m - 4
		:call(push)
		i = i + 4
		:call(syntax_isExpression)
		y = f == 0
		:load(x,i)
		x = x == 22 # ;
		y = y & x
		:call(pop) # expr1 mem
		z = s
		:call(pop) # assignment op
		:if(y){
			i = i + 4
			x = 7 # assignment
			:store(x,m)
			u = m - 4 # expression2
			m = m + 1
			:store(s,m) # assignment op
			m = m + 1
			:store(z,m) # expression1
			m = m + 1
			:store(u,m) # expression 2
			m = m + 1
			f = 0 # set match flag
			:if(d){
				:raw("ASS ")
			}
		} else {
			f = 1
		}
	}
}
:fun(syntax_isIf){
	:load(x,i)
	y = x == 11 # if
	:if(y){
		i = i + 4
		:load(x,i)
		y = x == 14 # (
		:if(y){
			i = i + 4
			f = 1
			:call(syntax_isExpression)
			y = f == 0
			:load(x,i)
			x = x == 15 # )
			y = y & x
			:if(y){
				i = i + 4
				x = 8 # if/else
				:store(x,m)
				u = m - 4 # expression is last cell
				m = m + 1
				x = 0 # if
				:store(x,m)
				m = m + 1
				:store(u,m) # expression
				m = m + 2 # skip one
				:load(x,i)
				y = x == 16 # {
				:if(y){
					i = i + 4
					:while(y){
						f = 1
						:call(syntax_isStatement)
						:if(f){
							:call(errorUnmatchedToken)
						}
						:load(x,i)
						y = x =! 17 # }
					}
					i = i + 4
				} else {
					f = 1
					:call(syntax_isStatement)
					:if(f){
						:call(errorUnmatchedToken)
					}
				}
				:load(x,i)
				y = x == 12 # else
				:if(y){
					:if(d){
						:raw("IF ")
					}
					x = 8 # if/else
					:store(x,m)
					m = m + 1
					x = 1 # else
					:store(x,m)
					m = m + 3 # skip two
					i = i + 4
					:load(x,i)
					y = x == 16 # {
					:if(y){
						i = i + 4
						:while(y){
							f = 1
							:call(syntax_isStatement)
							:if(f){
								:call(errorUnmatchedToken)
							}
							:load(x,i)
							y = x =! 17 # }
						}
						i = i + 4
					} else {
						f = 1
						:call(syntax_isStatement)
						:if(f){
							:call(errorUnmatchedToken)
						}
					}
					x = 8 # if/else
					:store(x,m)
					m = m + 1
					x = 2 # end
					:store(x,m)
					m = m + 3 # skip two
					:if(d){
						:raw("ELSE ")
					}
				} else {
					x = 8 # if/else
					:store(x,m)
					m = m + 1
					x = 2 # end
					:store(x,m)
					m = m + 3 # skip two
					:if(d){
						:raw("IF ")
					}
				}
			} else {
				f = 1
			}
		}
	}
}
:fun(syntax_isWhile){
	:load(x,i)
	y = x == 13 # while
	:if(y){
		i = i + 4
		:call(syntax_isExpression)
		y = f == 0
		:load(x,i)
		x = x == 15 # )
		:if(y){
			i = i + 4
			x = 9 # while
			:store(x,m)
			u = m - 4 # expression is last cell
			m = m + 1
			x = 0 # start
			:store(x,m)
			m = m + 1
			:store(u,m) # expression
			m = m + 2 # skip one
			:load(x,i)
			y = x == 16 # {
			:if(y){
				i = i + 4
				:while(y){
					f = 1
					:call(syntax_isStatement)
					:if(f){
						:call(errorUnmatchedToken)
					}
					:load(x,i)
					y = x =! 17 # }
				}
				i = i + 4
			} else {
				f = 1
				:call(syntax_isStatement)
				:if(f){
					:call(errorUnmatchedToken)
				}
			}
			x = 9 # while
			:store(x,m)
			m = m + 1
			x = 1 # end
			:store(x,m)
			m = m + 3 # skip two
			:if(d){
				:raw("WHILE ")
			}
		}
	}
}
:fun(syntax_isExprStmt){
	:call(syntax_isExpression)
	y = f == 0
	:load(x,i)
	x = x == 22 # ;
	y = y & x
	:if(y){
		i = i + 4
		x = 6 # expr stmt
		:store(x,m)
		x = m - 4 # expression
		m = m + 1
		:store(x,m)
		m = m + 3 # skip two
		f = 0 # set match flag
		:if(d){
			:raw("EXP ")
		}
	} else {
		f = 1
	}
}
:fun(syntax_isExpression){
	:call(syntax_isExpression_f)
	y = f == 0
	:if(y){
		f = 1
		:call(syntax_isExpression_ee)
	}
	:if(d){
		x = m - 4
		:call(debug_printExpression)
	}
}
:fun(syntax_isExpression_ee){
	:load(x,i)
	y = x == 42 # ||
	:if(y){
		i = i + 4
		s = m - 4
		:call(push) # expr1
		:call(syntax_isExpression_f)
		u = m - 4
		x = 2 # expression
		:store(x,m)
		m = m + 1
		x = 21 # ||
		:store(x,m) # type
		m = m + 1
		:call(pop) # expr1
		:store(s,m) # expr1
		m = m + 1
		:store(u,m) #expr2
		m = m + 1
		y = f == 0
		:if(y){
			f = 1
			:call(syntax_isExpression_ee)
		}
	} else {
		f = 0
	}
}
:fun(syntax_isExpression_f){
	:call(syntax_isExpression_g)
	y = f == 0
	:if(y){
		f = 1
		:call(syntax_isExpression_ff)
	}
}
:fun(syntax_isExpression_ff){
	:load(x,i)
	y = x == 41 # &&
	:if(y){
		i = i + 4
		s = m - 4
		:call(push) # expr1
		:call(syntax_isExpression_g)
		u = m - 4
		x = 2 # expression
		:store(x,m)
		m = m + 1
		x = 20 # &&
		:store(x,m) # type
		m = m + 1
		:call(pop) # expr1
		:store(s,m) # expr1
		m = m + 1
		:store(u,m) #expr2
		m = m + 1
		y = f == 0
		:if(y){
			f = 1
			:call(syntax_isExpression_ff)
		}
	} else {
		f = 0
	}
}
:fun(syntax_isExpression_g){
	:call(syntax_isExpression_h)
	y = f == 0
	:if(y){
		f = 1
		:call(syntax_isExpression_gg)
	}
}
:fun(syntax_isExpression_gg){
	:load(x,i)
	y = x == 29 # |
	:if(y){
		i = i + 4
		s = m - 4
		:call(push) # expr1
		:call(syntax_isExpression_i)
		u = m - 4
		x = 2 # expression
		:store(x,m)
		m = m + 1
		x = 19 # |
		:store(x,m) # type
		m = m + 1
		:call(pop) # expr1
		:store(s,m) # expr1
		m = m + 1
		:store(u,m) #expr2
		m = m + 1
		y = f == 0
		:if(y){
			f = 1
			:call(syntax_isExpression_gg)
		}
	} else {
		f = 0
	}
}
:fun(syntax_isExpression_h){
	:call(syntax_isExpression_i)
	y = f == 0
	:if(y){
		f = 1
		:call(syntax_isExpression_hh)
	}
}
:fun(syntax_isExpression_hh){
	:load(x,i)
	y = x == 28 # &
	:if(y){
		i = i + 4
		s = m - 4
		:call(push) # expr1
		:call(syntax_isExpression_i)
		u = m - 4
		x = 2 # expression
		:store(x,m)
		m = m + 1
		x = 18 # &
		:store(x,m) # type
		m = m + 1
		:call(pop) # expr1
		:store(s,m) # expr1
		m = m + 1
		:store(u,m) #expr2
		m = m + 1
		y = f == 0
		:if(y){
			f = 1
			:call(syntax_isExpression_hh)
		}
	} else {
		f = 0
	}
}
:fun(syntax_isExpression_i){
	:call(syntax_isExpression_j)
	y = f == 0
	:if(y){
		f = 1
		:call(syntax_isExpression_ii)
	}
}
:fun(syntax_isExpression_ii){
	:load(x,i)
	y = x == 30 # ==
	z = x == 31 # !=
	y = y | z
	:if(y){
		i = i + 4
		s = m - 4
		:call(push) # expr1
		y = x == 30
		:if(y){
			s = 16 # ==
		} else {
			s = 17 # !=
		}
		:call(push) # op
		:call(syntax_isExpression_j)
		u = m - 4
		x = 2 # expression
		:store(x,m)
		m = m + 1
		:call(pop) # op
		:store(s,m) # type
		m = m + 1
		:call(pop) # expr1
		:store(s,m) # expr1
		m = m + 1
		:store(u,m) #expr2
		m = m + 1
		y = f == 0
		:if(y){
			f = 1
			:call(syntax_isExpression_ii)
		}
	} else {
		f = 0
	}
}
:fun(syntax_isExpression_j){
	:call(syntax_isExpression_k)
	y = f == 0
	:if(y){
		f = 1
		:call(syntax_isExpression_jj)
	}
}
:fun(syntax_isExpression_jj){
	:load(x,i)
	y = x == 32 # <
	z = x == 33 # >
	y = y | z
	z = x == 34 # <=
	y = y | z
	z = x == 35 # >=
	y = y | z
	:if(y){
		i = i + 4
		s = m - 4
		:call(push) # expr1
		s = x - 20 # offset of new codes
		:call(push) # op
		:call(syntax_isExpression_k)
		u = m - 4
		x = 2 # expression
		:store(x,m)
		m = m + 1
		:call(pop) # op
		:store(s,m) # type
		m = m + 1
		:call(pop) # expr1
		:store(s,m) # expr1
		m = m + 1
		:store(u,m) #expr2
		m = m + 1
		y = f == 0
		:if(y){
			f = 1
			:call(syntax_isExpression_jj)
		}
	} else {
		f = 0
	}
}
:fun(syntax_isExpression_k){
	:call(syntax_isExpression_l)
	y = f == 0
	:if(y){
		f = 1
		:call(syntax_isExpression_kk)
	}
}
:fun(syntax_isExpression_kk){
	:load(x,i)
	y = x == 39 # +
	z = x == 40 # -
	y = y | z
	:if(y){
		i = i + 4
		s = m - 4
		:call(push) # expr1
		s = x - 35
		:call(push) # op
		:call(syntax_isExpression_l)
		u = m - 4
		x = 2 # expression
		:store(x,m)
		m = m + 1
		:call(pop) # op
		:store(s,m) # type
		m = m + 1
		:call(pop) # expr1
		:store(s,m) # expr1
		m = m + 1
		:store(u,m) #expr2
		m = m + 1
		y = f == 0
		:if(y){
			f = 1
			:call(syntax_isExpression_kk)
		}
	} else {
		f = 0
	}
}
:fun(syntax_isExpression_l){
	:call(syntax_isExpression_m)
	y = f == 0
	:if(y){
		f = 1
		:call(syntax_isExpression_ll)
	}
}
:fun(syntax_isExpression_ll){
	:load(x,i)
	y = x == 36 # *
	z = x == 37 # /
	y = y | z
	z = x == 38 # %
	y = y | z
	:if(y){
		i = i + 4
		s = m - 4
		:call(push) # expr1
		s = x - 29
		:call(push) # op
		:call(syntax_isExpression_m)
		u = m - 4
		x = 2 # expression
		:store(x,m)
		m = m + 1
		:call(pop) # op
		:store(s,m) # type
		m = m + 1
		:call(pop) # expr1
		:store(s,m) # expr1
		m = m + 1
		:store(u,m) #expr2
		m = m + 1
		y = f == 0
		:if(y){
			f = 1
			:call(syntax_isExpression_ll)
		}
	} else {
		f = 0
	}
}
:fun(syntax_isExpression_m){
	:load(x,i)
	y = x == 25 # ++
	:if(y){
		s = 2 # pref ++
	}
	z = x == 26 # --
	:if(z){
		s = 3 # pref --
	}
	y = y | z
	z = x == 39 # +
	:if(z){
		s = 4 # pref +
	}
	y = y | z
	z = x == 40 # -
	:if(z){
		s = 5 # pref -
	}
	y = y | z
	z = x == 24 # !
	:if(z){
		s = 6 # pref !
	}
	y = y | z
	:if(y){
		i = i + 4
		:call(push)
		:call(syntax_isExpression_m)
		u = 2 # expression
		:store(u,m)
		u = m - 4
		m = m + 1
		:call(pop)
		:store(s,m) # type
		m = m + 1
		:store(u,m) # inner expression
		m = m + 2 # skip one
	} else {
		:call(syntax_isExpression_n)
	}
}
:fun(syntax_isExpression_n){
	:call(syntax_isExpression_o)
	:call(syntax_isExpression_nn)
}
:fun(syntax_isExpression_nn){
	:load(x,i)
	y = x == 25 # ++
	z = x == 26 # --
	y = y | z
	:if(y){
		u = 2 # expression
		:store(u,m)
		u = m - 4 # save last cell
		x = x == 25
		:if(x){
			x = 0 # ++
		} else {
			x = 1 # --
		}
		m = m + 1
		:store(x,m) # type
		m = m + 1
		:store(u,m) # token
		m = m + 2 # skip one
		i = i + 4
		:call(syntax_isExpression_nn)
	}
}
:fun(syntax_isExpression_o){
	:load(x,i)
	y = x == 2 # ident
	:if(y){
		u = 22 # ident
	}
	z = x == 3 # const
	:if(z){
		u = 23
	}
	y = y | z
	:if(y){
		x = 2 # expression
		:store(x,m)
		m = m + 1
		:store(u,m) # type
		m = m + 1
		:store(i,m) # token
		m = m + 2 # skip one
		i = i + 4
		f = 0
	} else {
		y = x == 14 # (
		:if(y){
			i = i + 4
			:if(d){
				d = 0
				:call(syntax_isExpression)
				d = 1
			} else {
				:call(syntax_isExpression)
			}
			:load(x,i)
			y = x =! 15 # )
			:if(y){
				:call(errorExpectedRPARENT)
			}
			i = i + 4
		}
	}
}
:fun(syntax_isType){
	:load(x,i)
	y = x == 0
	:if(y){
		i = i + 4
		f = 0 # set match flag
	}
}
:fun(syntax_isDeclaration){
	:call(syntax_isType)
	y = f == 0 # match found
	:load(x,i)
	x = x == 2
	y = y & x
	:if(y){ # type ident
		i = i + 4
		:load(x,i)
		y = x == 22 # ;
		:if(y){ # type ident;
			i = i + 4
			x = 0
			:store(x,m)
			x = m - 4 # type was written in last cell
			m = m + 1
			:store(x,m)
			m = m + 1
			x = -1
			:store(x,m)
			m = m + 2 # skip one
			f = 0 # set match flag
			:if(d){
				:raw("DECL ")
			}
		} else {
			y = x == 1 # any assignment
			z = i + 1
			:load(x,z) # load id
			x = x == 0 # =
			y = y & x
			:if(y){ # type ident = 
				i = i + 4
				n = m - 4 # save type location
				f = 1
				:call(syntax_isExpression)
				y = f == 0 # match found
				:load(x,i)
				x = x == 22 # ;
				y = y & x
				:if(y){ # type ident = expr ;
					i = i + 4
					x = 0
					:store(x,m)
					m = m + 1
					:store(n,m) # type location was saved in n
					m = m + 1
					x = m - 6 # last cell (4) and the 2 we just added
					:load(x,m)
					m = m + 2 # skip one
					:if(d){
						:raw("INIT ")
					}
				} else {
					f = 1 # no match
				}
			} else {
				f = 1 # no match
			}
		}
	} else {
		f = 1 # no match
	}
}
#
# Phase 1 - Tokenize
#
:fun(tokenize){
	:if(d){
		:raw("Phase 1 - Tokenization\n")
	}
	l = 1 # line count
	i = 0 # file index
	c = i < b # read through the file
	:while(c){
		f = 1 # flag for matches ( 0 => stop trying to match)
		:call(tokenize_isComment)
		:if(f){
			:call(tokenize_isWhitespace)
			:if(f){
				:call(tokenize_isKeyword)
				:if(f){
					:call(tokenize_isConstant)
					:if(f){
						:call(tokenize_isSymbol)
						:if(f){
							:call(tokenize_isIdentifier)
							:if(f){
								:call(errorUnmatchedChar)
							}
						}
					}
				}
			}
		}
		c = i < b # Update condition
	}
	# End of tokens
	x = -1
	:store(x,m)
	m = m + 1
	:store(x,m)
	m = m + 1
	:store(x,m)
	m = m + 1
	:store(x,m)
	m = m + 1
}
# Match comment
:fun(tokenize_isComment){
	:load(x,i)
	y = x == 35 # '#'
	:if(y){
		f = 0 # set match flag
		i = i + 1 # increment file index
		:load(x,i)
		y = x =! 10 # skip characters until end of line
		:while(y){
			i = i + 1 # increment file index
			:load(x,i)
			y = x =! 10 # newline
		}
	}
}
# Match whitespace
:fun(tokenize_isWhitespace){
	:load(x,i)
	y = x == 10 # \n
	:if(y){
		l = l + 1 # increment line counter
	}
	z = x == 9 # \t
	y = y | z
	z = x == 32 # space
	y = y | z
	:if(y){
		f = 0 # set match flag
		:while(y){
			i = i + 1
			:load(x,i)
			y = x == 10 # \n
			:if(y){
				l = l + 1 # increment line counter
			}
			z = x == 9 # \t
			y = y | z
			z = x == 32 # space
			y = y | z
		}
	}
}
# Match keywords
:fun(tokenize_isKeyword){
	w = i # save file index if match fails
	# Preload 4 characters in t,u,v,z
	:load(p,i)
	i = i + 1
	:load(q,i)
	i = i + 1
	:load(r,i)
	i = i + 1
	:load(s,i)
	i = i + 1
	:load(t,i)
	i = i + 1
	:call(tokenize_isKeyword_bool)
	:if(f){
		:call(tokenize_isKeyword_char)
		:if(f){
			:call(tokenize_isKeyword_int)
			:if(f){
				:call(tokenize_isKeyword_void)
				:if(f){
					:call(tokenize_isKeyword_if)
					:if(f){
						:call(tokenize_isKeyword_else)
						:if(f){
							:call(tokenize_isKeyword_while)
							:if(f){
								:call(tokenize_isKeyword_return)
							}
						}
					}
				}
			}
		}
	}
	:if(f){
		i = w # restore file index if no match was found
	}
}
# input x
# output y
# writes: u,v,y
:fun(tokenize_isKeyword_helper){ # check if char is not identifier
	y = x < 48 # 0
	u = x > 57 # 9
	v = x < 65 # A
	u = u & v
	y = y | u
	u = x > 90 # Z
	v = x < 97 # a
	u = u & v
	v = x =! 95 # _
	u = u & v
	y = y | u
	u = x > 122 # z
	y = y | u
}
# input: loaded p,q,r,s,t
# output: sets r, writes memory
# write: x,y,m
# calls: tokenize_isKeyword_helper
:fun(tokenize_isKeyword_bool){
	x = t # 5th character should be non-identifier
	:call(tokenize_isKeyword_helper) # y contains result
	x = p == 98 # b
	y = y & x
	x = q == 111 # o
	y = y & x
	x = r == 111 # o
	y = y & x
	x = s == 108 # l
	y = y & x
	:if(y){ # match
		f = 0 # set match flag
		x = 0 # type 0
		:store(x,m)
		m = m + 1
		x = 2 # id 2 (bool)
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1 
		:if(d){
			:raw("BOOL ")
		}
	}
}
:fun(tokenize_isKeyword_char){
	x = t # 5th character should be non-identifier
	:call(tokenize_isKeyword_helper) # y contains result
	x = p == 99 # c
	y = y & x
	x = q == 104 # h
	y = y & x
	x = r == 97 # a
	y = y & x
	x = s == 114 # r
	y = y & x
	:if(y){ # match
		f = 0 # set match flag
		x = 0 # type 0
		:store(x,m)
		m = m + 1
		x = 1 # id 1 (char)
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("CHAR ")
		}
	}
}
:fun(tokenize_isKeyword_int){
	x = s # 4th character should be non-identifier
	:call(tokenize_isKeyword_helper) # y contains result
	x = p == 105 # i
	y = y & x
	x = q == 110 # n
	y = y & x
	x = r == 116 # t
	y = y & x
	:if(y){ # match
		f = 0 # set match flag
		x = 0 # type 0
		:store(x,m)
		m = m + 1
		x = 0 # id 0 (int)
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		# i is too far
		i = i - 1
		:if(d){
			:raw("INT ")
		}
	}
}
:fun(tokenize_isKeyword_void){
	x = t # 5th character should be non-identifier
	:call(tokenize_isKeyword_helper) # y contains result
	x = p == 118 # v
	y = y & x
	x = q == 111 # o
	y = y & x
	x = r == 105 # i
	y = y & x
	x = s == 100 # d
	y = y & x
	:if(y){ # match
		f = 0 # set match flag
		x = 0 # type 0
		:store(x,m)
		m = m + 1
		x = 3 # id 3 (void)
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("VOID ")
		}
	}
}
:fun(tokenize_isKeyword_if){
	x = r # 3rd character should be non-identifier
	:call(tokenize_isKeyword_helper) # y contains result
	x = p == 105 # i
	y = y & x
	x = q == 102 # f
	y = y & x
	:if(y){ # match
		f = 0 # set match flag
		x = 11 # type 11
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		# i is too far since most keywords are 4 chars long
		i = i - 3
		:if(d){
			:raw("IF ")
		}
	}
}
:fun(tokenize_isKeyword_else){
	x = t # 5th character should be non-identifier
	:call(tokenize_isKeyword_helper) # y contains result
	x = p == 101 # e
	y = y & x
	x = q == 108 # l
	y = y & x
	x = r == 115 # s
	y = y & x
	x = s == 101 # e
	y = y & x
	:if(y){ # match
		f = 0 # set match flag
		x = 12 # type 1
		:store(x,m)
		m = m + 3 # skip optional field
		x = l
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("ELSE ")
		}
	}
}
:fun(tokenize_isKeyword_while){
	:load(x,i) # 6th character should be non-identifier
	:call(tokenize_isKeyword_helper) # y contains result
	x = p == 119 # w
	y = y & x
	x = q == 104 # h
	y = y & x
	x = r == 105 # i
	y = y & x
	x = s == 108 # l
	y = y & x
	x = t == 101 # e
	y = y & x
	:if(y){ # match
		f = 0 # set match flag
		x = 13 # type 1
		:store(x,m)
		m = m + 3 # skip optional field
		x = l
		:store(x,m)
		m = m + 1
		i = i + 1 # increment file (we loaded but didnt increment)
		:if(d){
			:raw("WHILE ")
		}
	}
}
:fun(tokenize_isKeyword_return){
	:load(z,i) # 6th character
	i = i + 1
	:load(x,i) # 7th character should be non-identifier
	:call(tokenize_isKeyword_helper) # y contains result
	x = p == 114 # r
	y = y & x
	x = q == 101 # e
	y = y & x
	x = r == 116 # t
	y = y & x
	x = s == 117 # u
	y = y & x
	x = t == 114 # r
	y = y & x
	x = z == 110 # n
	y = y & x
	:if(y){ # match
		f = 0 # set match flag
		x = 27 # type 27
		:store(x,m)
		m = m + 3 # skip optional field
		x = l
		:store(x,m)
		m = m + 1
		i = i + 1 # increment file (we loaded but didnt increment)
		:if(d){
			:raw("RETURN ")
		}
	}
}
:fun(tokenize_isSymbol){
	:load(x,i)
	:call(tokenize_isSymbol_ADDEQ)
	:if(f){
		:call(tokenize_isSymbol_SUBEQ)
		:if(f){
			:call(tokenize_isSymbol_DIVEQ)
			:if(f){
				:call(tokenize_isSymbol_MULEQ)
				:if(f){
					:call(tokenize_isSymbol_INC)
					:if(f){
						:call(tokenize_isSymbol_DEC)
						:if(f){
							:call(tokenize_isSymbol_EQ)
							:if(f){
								:call(tokenize_isSymbol_NEQ)
								:if(f){
									:call(tokenize_isSymbol_LEQ)
									:if(f){
										:call(tokenize_isSymbol_GEQ)
										:if(f){
											:call(tokenize_isSymbol_AND)
											:if(f){
												:call(tokenize_isSymbol_OR)
												:if(f){
													:call(tokenize_isSymbol_LPARENT)
													:if(f){
														:call(tokenize_isSymbol_RPARENT)
														:if(f){
															:call(tokenize_isSymbol_LCURLY)
															:if(f){
																:call(tokenize_isSymbol_RCURLY)
																:if(f){
																	:call(tokenize_isSymbol_LBRACK)
																	:if(f){
																		:call(tokenize_isSymbol_RBRACK)
																		:if(f){
																			:call(tokenize_isSymbol_PERIOD)
																			:if(f){
																				:call(tokenize_isSymbol_COMMA)
																				:if(f){
																					:call(tokenize_isSymbol_SEMICOLON)
																					:if(f){
																						:call(tokenize_isSymbol_COLON)
																						:if(f){
																							:call(tokenize_isSymbol_EXCL)
																							:if(f){
																								:call(tokenize_isSymbol_ASSIGN)
																								:if(f){
																									:call(tokenize_isSymbol_BITAND)
																									:if(f){
																										:call(tokenize_isSymbol_BITOR)
																										:if(f){
																											:call(tokenize_isSymbol_LT)
																											:if(f){
																												:call(tokenize_isSymbol_GT)
																												:if(f){
																													:call(tokenize_isSymbol_MUL)
																													:if(f){
																														:call(tokenize_isSymbol_DIV)
																														:if(f){
																															:call(tokenize_isSymbol_MOD)
																															:if(f){
																																:call(tokenize_isSymbol_ADD)
																																:if(f){
																																	:call(tokenize_isSymbol_SUB)
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
:fun(tokenize_isSymbol_ADDEQ){
	y = x == 43 # +
	z = i + 1
	:load(z,z)
	z = z == 61 # =
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 1 # type 4
		:store(x,m)
		m = m + 1
		x = 1 # id 1 (+=)
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("ADDEQ ")
		}
	}
}
:fun(tokenize_isSymbol_SUBEQ){
	y = x == 45 # -
	z = i + 1
	:load(z,z)
	z = z == 61 # =
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 1 # type 1
		:store(x,m)
		m = m + 1
		x = 2 # id 2 (-=)
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("SUBEQ ")
		}
	}
}
:fun(tokenize_isSymbol_DIVEQ){
	y = x == 47 # /
	z = i + 1
	:load(z,z)
	z = z == 61 # =
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 1 # type 1
		:store(x,m)
		m = m + 1
		x = 3 # id 3 (/=)
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("DIVEQ ")
		}
	}
}
:fun(tokenize_isSymbol_MULEQ){
	y = x == 42 # *
	z = i + 1
	:load(z,z)
	z = z == 61 # =
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 1 # type 1
		:store(x,m)
		m = m + 1
		x = 4 # id 4 (*=)
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("MULEQ ")
		}
	}
}
:fun(tokenize_isSymbol_INC){
	y = x == 43 # +
	z = i + 1
	:load(z,z)
	z = z == 43 # +
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 25 # type 25
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("INC ")
		}
	}
}
:fun(tokenize_isSymbol_DEC){
	y = x == 45 # -
	z = i + 1
	:load(z,z)
	z = z == 45 # -
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 26 # type 26
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("DEC ")
		}
	}
}
:fun(tokenize_isSymbol_EQ){
	y = x == 61 # =
	z = i + 1
	:load(z,z)
	z = z == 61 # =
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 30 # type 30
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("EQ ")
		}
	}
}
:fun(tokenize_isSymbol_NEQ){
	y = x == 33 # !
	z = i + 1
	:load(z,z)
	z = z == 61 # =
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 31 # type 31
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("NEQ ")
		}
	}
}
:fun(tokenize_isSymbol_LEQ){
	y = x == 60 # <
	z = i + 1
	:load(z,z)
	z = z == 61 # =
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 34 # type 34
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("LEQ ")
		}
	}
}
:fun(tokenize_isSymbol_GEQ){
	y = x == 62 # >
	z = i + 1
	:load(z,z)
	z = z == 61 # =
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 35 # type 35
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("GEQ ")
		}
	}
}
:fun(tokenize_isSymbol_AND){
	y = x == 38 # &
	z = i + 1
	:load(z,z)
	z = z == 38 # &
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 41 # type 41
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("AND ")
		}
	}
}
:fun(tokenize_isSymbol_OR){
	y = x == 124 # |
	z = i + 1
	:load(z,z)
	z = z == 124 # |
	y = y & z
	:if(y){
		i = i + 2
		f = 0 # set match flag
		x = 42 # type 42
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("OR ")
		}
	}
}
:fun(tokenize_isSymbol_LPARENT){
	y = x == 40 # (
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 14 # type 14
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("LPARENT ")
		}
	}
}
:fun(tokenize_isSymbol_RPARENT){
	y = x == 41 # )
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 15 # type 15
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("RPARENT ")
		}
	}
}
:fun(tokenize_isSymbol_LCURLY){
	y = x == 123 # {
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 16 # type 16
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("LCURLY ")
		}
	}
}
:fun(tokenize_isSymbol_RCURLY){
	y = x == 125 # {
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 17 # type 17
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("RCURLY ")
		}
	}
}
:fun(tokenize_isSymbol_LBRACK){
	y = x == 91 # [
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 18 # type 18
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("LBRACK ")
		}
	}
}
:fun(tokenize_isSymbol_RBRACK){
	y = x == 93 # ]
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 19 # type 19
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("RBRACK ")
		}
	}
}
:fun(tokenize_isSymbol_PERIOD){
	y = x == 46 # .
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 20 # type 20
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("PERIOD ")
		}
	}
}
:fun(tokenize_isSymbol_COMMA){
	y = x == 44 # ,
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 21 # type 16
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("COMMA ")
		}
	}
}
:fun(tokenize_isSymbol_SEMICOLON){
	y = x == 59 # ;
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 22 # type 22
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("SEMICOLON ")
		}
	}
}
:fun(tokenize_isSymbol_COLON){
	y = x == 58 # :
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 23 # type 23
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("COLON ")
		}
	}
}
:fun(tokenize_isSymbol_ASSIGN){
	y = x == 61 # =
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 1 # type 1
		:store(x,m)
		m = m + 1
		x = 0 # id 0
		:store(x,m)
		m = m + 2 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("ASSIGN ")
		}
	}
}
:fun(tokenize_isSymbol_EXCL){
	y = x == 33 # !
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 24 # type 24
		:store(x,m)
		m = m + 3 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("EXCL ")
		}
	}
}
:fun(tokenize_isSymbol_BITAND){
	y = x == 38 # &
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 28 # type 28
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("BITAND ")
		}
	}
}
:fun(tokenize_isSymbol_BITOR){
	y = x == 124 # |
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 29 # type 29
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("BITOR ")
		}
	}
}
:fun(tokenize_isSymbol_LT){
	y = x == 60 # <
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 32 # type 32
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("LT ")
		}
	}
}
:fun(tokenize_isSymbol_GT){
	y = x == 62 # >
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 33 # type 33
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("GT ")
		}
	}
}
:fun(tokenize_isSymbol_MUL){
	y = x == 42 # *
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 36 # type 36
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("MUL ")
		}
	}
}
:fun(tokenize_isSymbol_DIV){
	y = x == 47 # /
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 37 # type 37
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("DIV ")
		}
	}
}
:fun(tokenize_isSymbol_MOD){
	y = x == 37 # %
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 38 # type 38
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("MOD ")
		}
	}
}
:fun(tokenize_isSymbol_ADD){
	y = x == 43 # +
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 39 # type 39
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("ADD ")
		}
	}
}
:fun(tokenize_isSymbol_SUB){
	y = x == 45 # -
	:if(y){
		i = i + 1
		f = 0 # set match flag
		x = 40 # type 40
		:store(x,m)
		m = m + 3 # skip 2 optional fields
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("SUB ")
		}
	}
}
:fun(tokenize_isConstant){
	:call(tokenize_isConstant_false)
	:if(f){
		:call(tokenize_isConstant_true)
		:if(f){
			:call(tokenize_isConstant_char)
			:if(f){
				:call(tokenize_isConstant_int)
				:if(f){
					:call(tokenize_isConstant_string)
				}
			}
		}
	}
}
:fun(tokenize_isConstant_true){
	:load(p,i)
	z = i + 1
	:load(q,z)
	z = z + 1
	:load(r,z)
	z = z + 1
	:load(s,z)
	z = z + 1
	:load(x,z)
	:call(tokenize_isKeyword_helper)
	z = p == 116 # t 
	y = y & z
	z = q == 114 # r
	y = y & z
	z = r == 117 # u
	y = y & z
	z = s == 101 # e
	y = y & z
	:if(y){
		i = i + 4
		f = 0 # set flag
		x = 3 # type 3
		:store(x,m)
		m = m + 1
		x = 2 # id 2 (constant(bool))
		:store(x,m)
		m = m + 1
		x = 1
		:store(x,m)
		m = m + 1 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("CBOOL(1) ")
		}
	}
}
:fun(tokenize_isConstant_false){
	:load(p,i)
	z = i + 1
	:load(q,z)
	z = z + 1
	:load(r,z)
	z = z + 1
	:load(s,z)
	z = z + 1
	:load(t,z)
	z = z + 1
	:load(x,z)
	:call(tokenize_isKeyword_helper)
	z = p == 102 # f 
	y = y & z
	z = q == 97 # a
	y = y & z
	z = r == 108 # l
	y = y & z
	z = s == 115 # s
	y = y & z
	z = t == 101 # e
	y = y & z
	:if(y){
		i = i + 5
		f = 0 # set flag
		x = 3 # type 3
		:store(x,m)
		m = m + 1
		x = 2 # id 2 (constant(bool))
		:store(x,m)
		m = m + 1
		x = 0
		:store(x,m)
		m = m + 1 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("CBOOL(0) ")
		}
	}
}
:fun(tokenize_isConstant_char){
	:load(p,i)
	z = i + 1
	:load(q,z)
	x = q
	:call(isValidChar)
	x = p == 39 # '
	y = y & x
	:if(y){
		z = z + 1
		y = q == 92 # \
		:if(y){
			:load(x,z)
			:call(convertEscapableChar)
			w = y
			z = z + 1
			:load(p,z)
			y = p == 39 # '
			:if(y){
				i = i + 4
				f = 0 # set flag
				x = 3 # type 3
				:store(x,m)
				m = m + 1
				x = 1 # id 1 (constant(char))
				:store(x,m)
				m = m + 1
				x = w
				:store(x,m)
				m = m + 1 # skip optional field
				x = l # line number
				:store(x,m)
				m = m + 1
				:if(d){
					:raw("CCHAR(")
					:call(putint)
					:raw(") ")
				}
			} else {
				:call(errorInvalidCharConstant)
			}
		} else {
			:load(r,z)
			y = r == 39 # '
			:if(y){
				i = i + 3
				f = 0 # set flag
				x = 3 # type 0
				:store(x,m)
				m = m + 1
				x = 1 # id 1 (constant(char))
				:store(x,m)
				m = m + 1
				x = q
				:store(x,m)
				m = m + 1 # skip optional field
				x = l # line number
				:store(x,m)
				m = m + 1
				:if(d){
					:raw("CCHAR(")
					:call(putint)
					:raw(") ")
				}
			} else {
				:call(errorInvalidCharConstant)
			}
		}
	}
}
:fun(tokenize_isConstant_int){
	w = i
	:load(x,i)
	y = x => 48 # 0
	u = x =< 57 # 9
	y = y & u
	v = x == 48 # 0
	:if(y){
		z = 0
		:while(y){
			z = z * 10
			y = z < 0
			:if(y){
				:call(errorConstantTooBig)
			}
			x = x - 48
			z = z + x
			i = i + 1
			:load(x,i)
			y = x => 48 # 0
			u = x =< 57 # 9
			y = y & u
			v = v & y
			:if(v){
				:call(errorLeadingZero)
			}
		}
		f = 0 # set flag
		x = 3 # type 3
		:store(x,m)
		m = m + 1
		x = 0 # id 0 (constant(int))
		:store(x,m)
		m = m + 1
		x = z
		:store(x,m)
		m = m + 1 # skip optional field
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("CINT(")
			x = z
			:call(putint)
			:raw(") ")
		}
	} else {
		i = w
	}
}
:fun(tokenize_isConstant_string){
	:load(x,i)
	y = x == 34 # "
	:if(y){
		z = i
		:while(y){
			i = i + 1
			:load(x,i)
			y = x == 92 # \
			:if(y){
				i = i + 1
				:load(x,i)
				:call(convertEscapableChar)
				y = 1
			} else {
				:call(isValidChar)
				y = 1 - y
				:if(y){
					:call(errorInvalidCharInString)
				}
				y = x =! 34 # "
			}
		}
		i = i + 1 # move past "
		f = 0 # set flag
		x = 3 # type 3
		:store(x,m)
		m = m + 1
		x = 3 # id 3 (constant(int))
		:store(x,m)
		m = m + 1
		x = z
		:store(x,m)
		m = m + 1
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("CSTRING(")
			:load(x,z)
			:putchar(x)
			z = z + 1
			y = 1
			:while(y){
				:load(x,z)
				z = z + 1
				:putchar(x)
				w = x == 92 # \
				:if(w){
					:load(x,z)
					z = z + 1
					:putchar(x)
				} else {
					w = x == 34 # "
					:if(w){
						y = 0
					}
				}
			}
			:raw(") ")
		}
	}
}
:fun(tokenize_isIdentifier){
	:load(x,i)
	z = i
	w = 0 # length
	y = x == 95 # _
	u = x => 65 # A
	v = x =< 90 # Z
	u = u & v
	y = y | u
	u = x => 97 # a
	v = x =< 122 # z
	u = u & v
	y = y | u
	:if(y){
		f = 0 # set match flag
		:while(y){
			w = w + 1
			i = i + 1
			:load(x,i)
			:call(tokenize_isKeyword_helper) # returns 1 in y if its NOT an identifier char
			y = 1 - y
		}
		f = 0 # set flag
		x = 2 # type 2
		:store(x,m)
		m = m + 1
		x = z # start of identifier
		:store(x,m)
		m = m + 1
		x = w # length of identifier
		:store(x,m)
		m = m + 1
		x = l # line number
		:store(x,m)
		m = m + 1
		:if(d){
			:raw("IDENT(")
			w = z + w # end
			y = z < w
			:while(y){
				:load(x,z)
				:putchar(x)
				z = z + 1
				y = z < w
			}
			:raw(") ")
		}
	}
}
#
# Phase 0 - Read file
#
:fun(readFile){
	:getchar(x)
	:while(x){
		:store(x,m)
		m = m + 1
		:getchar(x)
	}
}
#
# Utility functions
#
:fun(push){
	:store(s,a)
	a = a - 1
}
:fun(pop){
	a = a + 1
	:load(s,a)
}
:fun(putint){
	y = x < 0
	:if(y){
		:raw("-")
		w = x * -1
	} else {
		w = x
	}
	y = 10
	x = w / y
	z = x > 0
	:while(z){
		y = y * 10
		x = w / y
		z = x > 0
	}
	y = y / 10
	:while(y){
		x = w / y
		x = x % 10
		x = x + 48
		:putchar(x)
		y = y / 10
	}
}
# input: x
# writes: y
:fun(convertEscapableChar){
	y = x == 110 # n
	:if(y){
		y = 10 # newline
	} else {
		y = x == 116 # t
		:if(y){
			y = 9 # tab
		} else {
			y = x == 39 # '
			:if(y){
				y = 39
			} else {
				y = x == 34 # "
				:if(y){
					y = 34
				} else {
					y = x == 92 # \
					:if(y){
						y = 92
					} else {
						:raw("Invalid escape sequence. Line ")
						x = l
						:call(putint)
						:raw("\n")
						x = 1
						:exit(x)
					}
				}
			}
		}
	}
}
:fun(isValidChar){
	y = x => 32 # space
	u = x =< 126 # ~
	y = y & u
}
:fun(debug_printExpression){
	u = x + 1
	:load(u,u)
	y = u < 22
	:if(y){
		s = x
		:raw("(")
		:call(push)
		x = x + 2
		:load(x,x)
		:call(debug_printExpression)
		:call(pop)
		x = s + 1
		:load(x,x)
		:call(putint)
		x = s + 3
		:load(x,x)
		:call(debug_printExpression)
		:raw(")")
	}
}
#
# Errors
#
:fun(errorExpectedLCURLY){
	:raw("Expected {, found token type ")
	:load(x,i)
	:call(putint)
	:raw(". ")
	x = i + 3
	:load(x,x)
	:call(errorPrintLine)
}
:fun(errorExpectedRPARENT){
	:raw("Expected ), found token type ")
	:load(x,i)
	:call(putint)
	:raw(". ")
	x = i + 3
	:load(x,x)
	:call(errorPrintLine)
}
:fun(errorUnmatchedToken){
	:raw("Unmatched token (type ")
	:load(x,i)
	:call(putint)
	:raw("). ")
	x = i + 3
	:load(x,x)
	:call(errorPrintLine)
}
:fun(errorInvalidCharConstant){
	:raw("Invalid char constant. ")
	x = l
	:call(errorPrintLine)
}
:fun(errorLeadingZero){
	:raw("Invalid int constant (leading zeros). ")
	x = l
	:call(errorPrintLine)
}
:fun(errorConstantTooBig){
	:raw("Invalid int constant (too big). ")
	x = l
	:call(errorPrintLine)
}
:fun(errorInvalidCharInString){
	:raw("Invalid char encountered in string literal. ")
	x = l
	:call(errorPrintLine)
}
:fun(errorUnmatchedChar){
	:raw("Unmatched char '")
	:load(x,i)
	:putchar(x)
	:raw("' in file. ")
	x = l
	:call(errorPrintLine)
}
:fun(errorPrintLine){
	:raw("Line ")
	:call(putint)
	:raw("\n")
	x = 1
	:exit(x)
}
